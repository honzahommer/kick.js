/*!
 * ga.js v1.0.0 (https://github.com/honzahommer/ga.js)
 * Copyright 2016 Honza Hommer <honza@hommer.cz>.
 * Licensed under the MIT licence
 */

/**
 * @param {window} window
 * @param {document} document
 * @param {undefined} [undefined]
 */
(function(window, document, undefined, start) {

/**
 * @param {String} method
 * @param {arguments} args
 * @param {*} item
 * @returns {Array}
 */
if (!'performance' in window) {
    var start = (new Date().getTime());

    window.performance = {
        now: function () {
            return ((new Date().getTime()) - start);
        }
    }
}

var _debug = false;

/**
 * @param {String} method
 * @param {arguments} args
 * @param {*} item
 * @returns {Array}
 */
function _arguments(method, args, item) {
    var _args = Array.prototype.slice.call(args);

    return (_args[method](item), _args);
}

/**
 * @param {String} rule
 * @param {*} subject
 * @returns {Boolean}
 */
function _validate(rule, subject) {
    switch (rule) {
        case 'id':
            return (/^ua-\d{4,9}-\d{1,4}$/i).test(subject.toString());
    }
}

/**
 * @param {Array} collection
 * @param {Function} iteratee
 */
function _for(collection, iteratee) {
    if (Object.prototype.toString.call(collection) !== '[object Array]') {
        try {
            collection = Array.prototype.slice.call(collection);
        } catch (e) {
            return false;
        }
    }

    for (var i = 0; i < collection.length; i++) {
        iteratee(collection[i], i);
    }
}

/**
 * @param {Object} collection
 * @param {Function} iteratee
 */
function _forEach(collection, iteratee) {
    if (typeof collection !== 'object') {
        return;
    }

    for (var prop in collection) {
        if(collection.hasOwnProperty(prop)) {
            iteratee(collection[prop], prop);
        }
    }
}


/**
 * @param {*} obj
 * @returns {Boolean}
 */
function _typeOf(obj) {
    return {}.toString.call(obj).split(' ')[1].slice(0, -1).toLowerCase();
}


/**
 * @param {String} [title]
 * @param {...*} args
 */
function _log() {
    var title;

    if (_debug === false) {
        console.error('v pici');
        return;
    }

    if (arguments.length > 1) {
        title = [].shift.apply(arguments);
    }

    if (title) {
        console.group.call(window, '[ga.js]', title);
    }

    console.info.apply(window, arguments);

    if (title) {
        console.groupEnd.call(window);
    }
}

/**
 * @constructor
 */
var GAjs = function () {
    if (arguments.length !== 0) {
        var create = this.create.apply(this, arguments);
    }

    return this;
};

/**
 * @param {String} id
 * @param {Object} [gaOptions]
 * @returns {GAjs}
 */
GAjs.prototype.create = function (id, gaOptions) {
    var that = this;

    this.gaOptions = gaOptions = (typeof gaOptions === 'object') ? gaOptions : {};
    this.namespace = '';
    this.gaObjName = '_ga';
    this.options = {
        debug: false,
        hitCb: {
            pageview: function () {
                var location = window.location;

                if (location.search.indexOf('utm_') != -1 && history.replaceState) {
                    history.replaceState({}, '', location.toString().replace(/(\&|\?)utm([_a-z0-9=]+)/g, ''));
                };
            }
        }
    };

    // separate ga.js options from tracker options
    _for(['debug'], function (option) {
        if (option in gaOptions) {
            that.options[option] = gaOptions[option]
            delete(gaOptions[option])
        }
    });

    // debug global
    _debug = !!this.options.debug;

    if (_validate('id', id) === false) {
        _log('tracking Id looks wrong', 'The tracking Id should only be of the format UA-NNNNNN-N');
    }

    // store the name of the GA object
    window.GoogleAnalyticsObject = this.gaObjName;

    // check whether the GA object is defined
    if ((this.gaObjName in this) === false) {
        // define the GA object
        // and add the tasks to the queue
        this[this.gaObjName] = window[this.gaObjName] = function () {
            (window[that.gaObjName].q = window[that.gaObjName].q || []).push(arguments);
        };

        that[that.gaObjName] = window[that.gaObjName];
    }

    // store the current timestamp
    this[this.gaObjName].l = window[this.gaObjName].l = (new Date()).getTime();

    // store namespace
    _for(arguments, function (argument) {
        if (_typeOf(argument) === 'object' && 'name' in argument) {
            var namespace = argument.name;

            return (that.namespace = namespace, window.GA[namespace] = that, true);
        }
    });

    // create a new script element
    var script = document.createElement('script');
    script.src = 'https://www.google-analytics.com/analytics.js';
    script.async = true;

    // insert the script element into the document
    var firstScript = document.getElementsByTagName('script')[0];
    firstScript.parentNode.insertBefore(script, firstScript);

    // create tracker
    var createTracker = this[this.gaObjName].apply(this, _arguments('unshift', arguments, 'create'));

    // log
    _log('creating tracker', 'New tracker', this.namespace ? '"' + this.namespace + '"' : '' ,'created');

    return this.pageview.call(this);
}

/**
 * @param {(String|Array)} collection
 * @param {...options} options
 * @returns {GAjs}
 */
GAjs.prototype.plugin = GAjs.prototype.require = function (name, options) {
    var namespace = this.namespace;
    var command = [namespace, 'require'].join('.');

    _log('loading plugin', 'Plugin "' + name + '" initialized on tracker', namespace ? '"' + namespace + '"' : '', arguments);

    return (this[this.gaObjName].apply(this, _arguments('unshift', arguments, command)), this);
}

/**
 * @param {...*} options
 * @returns {GAjs}
 */
GAjs.prototype.send = function () {
    var command = [this.namespace, 'send'].join('.');
    var options = (arguments.length === 0) ? [command] : _arguments('unshift', arguments, command);
    var hitType = options[1];

    _log('calling command', 'Command "' + hitType + '"', 'on tracker', this.namespace ? '"' + this.namespace + '"' : '' ,'called', options);

    return (window[this.gaObjName].apply(this, options), this);
}

// Create shorthand function for send hit types
_for(['pageview', 'event', 'social', 'screenview', 'timing', 'exception'], function (hitType) {
    /**
     * @param {...*} options
     * @returns {GAjs}
     */
    GAjs.prototype[hitType] = function () {
        var options = (arguments.length === 0) ? [hitType] : _arguments('unshift', arguments, hitType);

        if (hitType in this.options.hitCb && _typeOf(this.options.hitCb[hitType]) === 'function') {
            var count = options.length;
            var hitCb = this.options.hitCb[hitType];

            if (count && _typeOf(options[count - 1]) === 'object') {
                options[count - 1].hitCallback = hitCb;
            } else {
                options = _arguments('push', options, {
                    hitCallback: hitCb
                });
            }
        }

        _log('calling hit', 'Hit "' + hitType + '"', 'on tracker', this.namespace ? '"' + this.namespace + '"' : '' ,'called, triggering command "' + [this.namespace, hitType].join('.') + '"');

        return (this.send.apply(this, options), this);
    }
});

if (('GA' in window) === false) {
    window.GA = {
        start: start,
        now: function () {
            return Math.round(('performance' in window) ? performance.now() : ((new Date().getTime()) - GA.start));
        }
    };
}

var pkg = window.GA.js = GAjs;

_forEach(GAjs, function(item, key) {
    pkg[key] = item;
});

}(window, document, undefined, (new Date().getTime())));

//# sourceMappingURL=data:application/json;base64,